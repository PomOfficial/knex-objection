/**
 * @file index
 * @author Jim Bulkowski <jim.b@paperelectron.com>
 * @project knex-objection
 * @license MIT {@link http://opensource.org/licenses/MIT}
 */

import {CreatePlugin} from '@pomegranate/plugin-tools'
import {map, get, isFunction, isString, each, capitalize, toLower, merge,fromPairs, forOwn} from 'lodash/fp'
import {Model} from 'objection';
import * as objection from 'objection'

export {objection}

const tsGenerator = `// Generated by the Pomegranate cli on {{creationDate}}

// name: {{name}}

import {objection} from '@pomofficial/knex-objection'

export class {{name}} extends objection.Model {

}

export const ClassModel = (PluginLogger) => {
  
  return {{name}}
}
`

export const Plugin = CreatePlugin('anything')
  .configuration({
    name: 'KnexObjection',
    injectableParam: 'Objection',
    injectableScope: 'global',
    applicationMember: ['Knex'],
    depends: ['@pomofficial/KnexClient'],
    provides: [],
    optional: []
  })
  .variables({
    globalIdColumnName: null
  })
  .hooks({
    load: async (Injector,PluginVariables,  PluginFiles, PluginLogger, Knex) => {
      let files = await PluginFiles('main').fileList({ext: '.js'})
      if(isString(PluginVariables.globalIdColumnName)){
        Model.idColumn = PluginVariables.globalIdColumnName
        PluginLogger.warn(`Objection using ${PluginVariables.globalIdColumnName} globally as id column name.`)
      }
      Model.knex(Knex)

      return fromPairs(map((file) => {
        let required = require(file.path)
        let fileName = file.getBaseName()

        PluginLogger.log(`Found Model: ${fileName}.`, 2)

        let M = get('ClassModel', required)
        if (!M) {
          throw new Error(`Model file ${fileName} does not contain an export on the ClassModel property.`)
        }
        if (!isFunction(M)) {
          throw new Error(`Model file ${fileName} does not export an injectable function on the ClassModel property.`)
        }

        return [fileName, Injector.inject(M)]
      }, files))
    },
    start: () => {

    },
    stop: () => {

    }
  })
  .directories([{prop: 'main', path: '.'}])
  .commands(function (PomConfig, PluginFiles, Handlebars) {
    return (yargs) => {
      return yargs
        .usage('usage: $0')
        .command({
          command: 'generate <name>',
          aliases: 'g',
          describe: `Generates Objection model file <name>`,
          builder: (yargs) => {
            return yargs
              .positional('name', {
                describe: 'The the filename to be created.',
                default: 'index',
                type: 'string'
              })
              .option('l', {
                alias: 'language',
                describe: 'Generate TypeScript or Javascript',
                default: 'ts',
                choices: ['ts'],
                type: 'string'
              })
              .option('force', {
                alias: 'f',
                default: false,
                describe: 'overwrites the specified file if it exists.',
                type: 'boolean'
              })
          },
          handler: async (argv) => {
            let Pf = PluginFiles('main')
            let file = `${argv.name}.${argv.language}`
            let exists = await Pf.projectFileExists(file)
            let compile = Handlebars.compile(tsGenerator)
            let upperName = argv.name
            let lowerName = toLower(argv.name)
            let compiled = compile({
              creationDate: new Date().toDateString(),
              name: argv.name,
              upperName,
              lowerName
            })

            if (exists && !argv.force) {
              throw new Error(`${file} \n exists \n Rerun with --force to overwrite.`)
            }
            await Pf.outputProjectFile(file, compiled)
            console.log(`Created @pomofficial/KnexObjection file ${file}`)
          }
        })
        .help()
    }
  })